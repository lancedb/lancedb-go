#ifndef LANCEDB_H
#define LANCEDB_H

#pragma once

/* Generated with cbindgen:0.29.0 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * Result type for C interface
 */
typedef struct SimpleResult {
  bool SUCCESS;
  char *ERROR_MESSAGE;
} SimpleResult;

/**
 * Version information
 */
typedef struct VersionInfo {
  int VERSION;
  int64_t TIMESTAMP;
  char *METADATA_JSON;
} VersionInfo;

/**
 * Connect to a LanceDB database (simple version)
 */
struct SimpleResult *simple_lancedb_connect(const char *uri, void **handle);

/**
 * Connect to a database with storage options
 */
struct SimpleResult *simple_lancedb_connect_with_options(const char *uri,
                                                         const char *options_json,
                                                         void **handle);

/**
 * Close a connection
 */
struct SimpleResult *simple_lancedb_close(void *handle);

/**
 * Delete rows from a table using SQL predicate (simple version)
 */
struct SimpleResult *simple_lancedb_table_delete(void *table_handle,
                                                 const char *predicate,
                                                 int64_t *deleted_count);

/**
 * Update rows in a table using SQL predicate and column updates (simple version)
 */
struct SimpleResult *simple_lancedb_table_update(void *table_handle,
                                                 const char *predicate,
                                                 const char *updates_json);

/**
 * Add JSON data to a table (simple version)
 * Converts JSON array of objects to Arrow RecordBatch and adds to table
 */
struct SimpleResult *simple_lancedb_table_add_json(void *table_handle,
                                                   const char *json_data,
                                                   int64_t *added_count);

/**
 * Add data to a table using Arrow IPC format (more efficient than JSON)
 * Accepts batch of records as Arrow IPC binary data
 */
struct SimpleResult *simple_lancedb_table_add_ipc(void *table_handle,
                                                  const uint8_t *ipc_data,
                                                  size_t ipc_len,
                                                  int64_t *added_count);

/**
 * Get table names
 */
struct SimpleResult *simple_lancedb_table_names(void *handle, char ***names, int *count);

/**
 * Free table names array
 */
void simple_lancedb_free_table_names(char **names, int count);

/**
 * Initialize the simple LanceDB library
 */
int simple_lancedb_init(void);

/**
 * Free a SimpleResult
 */
void simple_lancedb_result_free(struct SimpleResult *result);

/**
 * Free a C string allocated by the library
 */
void simple_lancedb_free_string(char *s);

/**
 * Create an index on the specified columns
 */
struct SimpleResult *simple_lancedb_table_create_index(void *table_handle,
                                                       const char *columns_json,
                                                       const char *index_type,
                                                       const char *index_name);

/**
 * Get all indexes for a table (returns JSON string)
 */
struct SimpleResult *simple_lancedb_table_get_indexes(void *table_handle, char **indexes_json);

/**
 * Count rows in a table (simple version)
 */
struct SimpleResult *simple_lancedb_table_count_rows(void *table_handle, int64_t *count);

/**
 * Get table version (simple version)
 */
struct SimpleResult *simple_lancedb_table_version(void *table_handle, int64_t *version);

/**
 * Get table schema as JSON (simple version)
 */
struct SimpleResult *simple_lancedb_table_schema(void *table_handle, char **schema_json);

/**
 * Get table schema as Arrow IPC binary format (more efficient than JSON)
 */
struct SimpleResult *simple_lancedb_table_schema_ipc(void *table_handle,
                                                     uint8_t **schema_ipc_data,
                                                     size_t *schema_ipc_len);

/**
 * Free IPC schema data allocated by simple_lancedb_table_schema_ipc
 */
void simple_lancedb_free_ipc_data(uint8_t *data);

/**
 * Execute a select query with various predicates (vector search, filters, etc.)
 */
struct SimpleResult *simple_lancedb_table_select_query(void *table_handle,
                                                       const char *query_config_json,
                                                       char **result_json);

/**
 * Create a table with a simple JSON schema
 */
struct SimpleResult *simple_lancedb_create_table(void *handle,
                                                 const char *table_name,
                                                 const char *schema_json);

/**
 * Create a table with Arrow IPC schema (more efficient than JSON)
 */
struct SimpleResult *simple_lancedb_create_table_with_ipc(void *handle,
                                                          const char *table_name,
                                                          const uint8_t *schema_ipc,
                                                          size_t schema_len);

/**
 * Drop a table from the database (simple version)
 */
struct SimpleResult *simple_lancedb_drop_table(void *handle, const char *table_name);

/**
 * Open a table from the database (simple version)
 */
struct SimpleResult *simple_lancedb_open_table(void *handle,
                                               const char *table_name,
                                               void **table_handle);

/**
 * Close a table handle (simple version)
 */
struct SimpleResult *simple_lancedb_table_close(void *table_handle);

/**
 * Free a VersionInfo structure
 */
void lancedb_version_info_free(struct VersionInfo *version);

#endif  /* LANCEDB_H */
