name: CI (Optimized)

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'LICENSE'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'LICENSE'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # ⚡ Phase 1: Lightning-fast checks (only formatting)
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust (minimal)
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Setup Go (minimal)  
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Check Rust formatting
        run: cd rust && cargo fmt -- --check

      - name: Check Go formatting
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Go code is not formatted. Run 'go fmt ./...' to fix."
            gofmt -l .
            exit 1
          fi

  # 🏗️ Phase 2: Build artifacts once (includes linting)
  build-artifacts:
    name: Build Artifacts
    needs: quick-checks
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            rust-target: x86_64-unknown-linux-gnu
            artifact-name: linux-x64
          # - os: macos-latest
          #   rust-target: aarch64-apple-darwin
          #   artifact-name: macos-arm64
          # - os: macos-13
          #   rust-target: x86_64-apple-darwin
          #   artifact-name: macos-x64
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
          targets: ${{ matrix.rust-target }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      # Install system dependencies
      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install system dependencies (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install protobuf

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rust/target/
          key: ${{ matrix.os }}-cargo-${{ matrix.rust-target }}-${{ hashFiles('rust/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-cargo-${{ matrix.rust-target }}-
            ${{ matrix.os }}-cargo-

      - name: Install cbindgen (cached)
        run: |
          if ! command -v cbindgen &> /dev/null; then
            cargo install cbindgen --version ^0.26
          fi

      # Rust linting (moved here from quick-checks)
      - name: Lint Rust code
        run: |
          cd rust
          cargo clippy --target ${{ matrix.rust-target }} -- -D warnings

      - name: Build using new binary distribution system
        run: |
          # Make build scripts executable
          chmod +x scripts/build-native.sh
          
          # Map CI matrix to our platform parameters
          case "${{ matrix.rust-target }}" in
            "x86_64-unknown-linux-gnu")
              ./scripts/build-native.sh linux amd64
              ;;
            "aarch64-apple-darwin")  
              ./scripts/build-native.sh darwin arm64
              ;;
            "x86_64-apple-darwin")
              ./scripts/build-native.sh darwin amd64
              ;;
            *)
              echo "❌ Unknown target: ${{ matrix.rust-target }}"
              exit 1
              ;;
          esac

      - name: Verify build artifacts
        run: |
          echo "📝 Checking binary distribution structure..."
          ls -la include/ || echo "❌ Missing include/ directory"
          ls -la lib/ || echo "❌ Missing lib/ directory"
          
          # Show what was built
          echo "📚 Built libraries:"
          find lib/ -name "*.a" -o -name "*.so" -o -name "*.dylib" -o -name "*.lib" -o -name "*.dll" | sort
          
          echo "📋 Header files:"
          find include/ -name "*.h" | sort

      - name: Build Go module
        run: go build ./...

      # 📦 Upload reusable artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.artifact-name }}
          path: |
            lib/
            include/
          retention-days: 1
          compression-level: 6

  # 🧪 Phase 3: Testing (reuses artifacts)
  test:
    name: Test Suite
    needs: build-artifacts
    strategy:
      matrix:
        os: [ubuntu-latest]
        go-version: ['1.21']
#        exclude:
#          # Optimize: only test latest Go on macOS
#          - os: macos-latest
#            go-version: '1.22'
#          - os: macos-latest
#            go-version: '1.21'
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      # 📥 Download pre-built artifacts (no rebuild!)
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.os == 'ubuntu-latest' && 'linux-x64' || 'macos-arm64' }}
          path: .

      # Fix artifact directory structure (same as build-examples)
      - name: Verify build artifacts for testing
        run: |
          echo "🔍 Verifying binary distribution structure for tests..."
          
          # Check header files
          if [ -f "include/lancedb.h" ]; then
            echo "✅ Found header file: include/lancedb.h"
          else
            echo "❌ Missing header file: include/lancedb.h"
            find . -name "lancedb.h" 2>/dev/null || echo "No lancedb.h found anywhere"
            exit 1
          fi
          
          # Check library files
          if ls lib/*/liblancedb_go.* >/dev/null 2>&1; then
            echo "✅ Found library files:"
            ls lib/*/liblancedb_go.* | head -5
          else
            echo "❌ Missing library files in lib/ directories"
            find . -name "liblancedb_go.*" 2>/dev/null || echo "No library files found anywhere"
            exit 1
          fi
          
          echo "✅ Binary distribution verified for testing"

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.55.2
          skip-cache: false

      - name: Run Go linting
        run: golangci-lint run --config .golangci.yml

      # Debug: Check library files before running tests
      - name: Debug - Verify library files for tests
        run: |
          echo "Checking library files for runtime..."
          ls -la lib/
          find lib/ -name "liblancedb_go.*" -exec file {} \;
          echo "PWD: $(pwd)"
          
          # Check if we have libraries for current platform
          CURRENT_PLATFORM=$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m | sed 's/x86_64/amd64/; s/aarch64/arm64/')
          echo "Current platform: $CURRENT_PLATFORM"
          if [ -d "lib/$CURRENT_PLATFORM" ]; then
            echo "✅ Found platform-specific libraries at: lib/$CURRENT_PLATFORM"
            ls -la "lib/$CURRENT_PLATFORM"
          else
            echo "⚠️  Platform-specific libraries not found, checking available platforms:"
            ls lib/ 2>/dev/null || echo "No lib/ directory"
          fi

      - name: Run tests with race detection
        run: |
          # Set up library path for current platform
          CURRENT_PLATFORM=$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m | sed 's/x86_64/amd64/; s/aarch64/arm64/')
          if [ -d "lib/$CURRENT_PLATFORM" ]; then
            export LD_LIBRARY_PATH="$(pwd)/lib/$CURRENT_PLATFORM:${LD_LIBRARY_PATH:-}"
            echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
            
            # Check dynamic linking if .so files exist
            if ls lib/$CURRENT_PLATFORM/*.so >/dev/null 2>&1; then
              ldd lib/$CURRENT_PLATFORM/*.so 2>/dev/null || echo "ldd check failed"
            fi
          else
            echo "⚠️  Using default library path (static linking expected)"
          fi
          go test -v -race ./...

      - name: Run benchmarks
        run: |
          # Set up library path for current platform
          CURRENT_PLATFORM=$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m | sed 's/x86_64/amd64/; s/aarch64/arm64/')
          if [ -d "lib/$CURRENT_PLATFORM" ]; then
            export LD_LIBRARY_PATH="$(pwd)/lib/$CURRENT_PLATFORM:${LD_LIBRARY_PATH:-}"
          fi
          go test -bench=. -benchmem ./...

  # # 🔒 Security scanning (lightweight, no rebuild)
  # security:
  #   name: Security Scan
  #   needs: quick-checks
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Rust (minimal)
  #       uses: dtolnay/rust-toolchain@stable

  #     - name: Setup Go (minimal)
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: '1.21'

  #     - name: Run Rust security audit (cached)
  #       run: |
  #         if ! command -v cargo-audit &> /dev/null; then
  #           cargo install --locked cargo-audit
  #         fi
  #         cd rust && cargo audit

  #     - name: Run Go security scan
  #       uses: securego/gosec@master
  #       with:
  #         args: '-fmt sarif -out gosec.sarif ./...'
  #       continue-on-error: true

  #     - name: Upload SARIF file
  #       uses: github/codeql-action/upload-sarif@v3
  #       if: always()
  #       with:
  #         sarif_file: gosec.sarif

  # ⚡ Examples (reuses artifacts)
  build-examples:
    name: Build Examples
    needs: build-artifacts
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      # 📥 Reuse build artifacts with correct directory structure  
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-linux-x64
          path: .
        continue-on-error: false

      # Debug: Check if artifacts are in the right place
      - name: Debug - List downloaded artifacts
        run: |
          echo "Checking downloaded artifacts..."
          find . -name "lancedb.h" 2>/dev/null || echo "❌ lancedb.h not found anywhere"
          find . -name "*.a" -o -name "*.so" -o -name "*.dylib" 2>/dev/null || echo "❌ No library files found"
          echo "Directory structure:"
          ls -la lib/ 2>/dev/null || echo "❌ lib/ directory missing"
          ls -la include/ 2>/dev/null || echo "❌ include/ directory missing"

      # Verify binary distribution structure
      - name: Verify build artifacts for examples
        run: |
          echo "🔍 Verifying binary distribution structure for examples..."
          
          # Check header files
          if [ -f "include/lancedb.h" ]; then
            echo "✅ Found header file: include/lancedb.h"
          else
            echo "❌ Missing header file: include/lancedb.h" 
            find . -name "lancedb.h" 2>/dev/null || echo "No lancedb.h found anywhere"
            exit 1
          fi
          
          # Check library files
          if ls lib/*/liblancedb_go.* >/dev/null 2>&1; then
            echo "✅ Found library files:"
            ls lib/*/liblancedb_go.* | head -5
            
            # Verify final structure
            echo "📁 Directory structure:"
            ls -la include/
            ls -la lib/
          else
            echo "❌ Missing library files in lib/ directories"
            find . -name "liblancedb_go.*" 2>/dev/null || echo "No library files found anywhere"
            exit 1
          fi
          
          echo "✅ Binary distribution verified for examples"

      - name: Build examples (using pre-built artifacts)
        run: |
          # Create examples output directory  
          mkdir -p build/examples
          
          for dir in examples/*/; do
            if [ -d "$dir" ] && [ "$(basename "$dir")" != "README.md" ]; then
              example_name=$(basename "$dir")
              echo "Building $example_name..."
              cd "$dir"
              go build -o "../../build/examples/${example_name}_example" .
              cd ../..
            fi
          done
          
          # Show what was built
          echo "📦 Built examples:"
          ls -la build/examples/

      - name: Upload example binaries
        uses: actions/upload-artifact@v4
        with:
          name: examples
          path: build/examples/*_example
          retention-days: 1

  # 📚 Documentation (minimal dependencies)
  docs:
    name: Documentation
    needs: quick-checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust (minimal)
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Go (minimal)
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Generate Rust documentation
        run: cd rust && cargo doc --no-deps

      - name: Check Go documentation
        run: |
          echo "Checking documentation for all packages..."
          for pkg in $(go list ./...); do
            echo "Checking documentation for $pkg"
            go doc "$pkg" > /dev/null || echo "Warning: No documentation found for $pkg"
          done
          echo "Documentation check completed"

  # 🎯 Final status aggregation
  ci-success:
    name: CI Success
    if: always()
    needs: [quick-checks, build-artifacts, test, build-examples, docs]
    runs-on: ubuntu-latest
    
    steps:
      - name: Check all jobs status
        run: |
          jobs_status='${{ toJson(needs) }}'
          echo "Jobs status: $jobs_status"
          
          if echo "$jobs_status" | jq -r '.[] | select(.result != "success" and .result != "skipped") | .result' | grep -q .; then
            echo "❌ Some jobs failed"
            exit 1
          fi
          
          echo "✅ All jobs completed successfully!"

  # 🧹 Cleanup (optional)
  cleanup:
    name: Cleanup Artifacts
    if: always()
    needs: ci-success
    runs-on: ubuntu-latest
    steps:
      - name: Delete temporary artifacts
        uses: geekyeggo/delete-artifact@v4
        with:
          name: |
            build-*
            examples
        continue-on-error: true
