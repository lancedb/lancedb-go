name: CI (Optimized)

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'LICENSE'
      - '.github/workflows/release.yml'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'LICENSE'
      - '.github/workflows/release.yml'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # ‚ö° Phase 1: Lightning-fast checks (only formatting)
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust (minimal)
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Setup Go (minimal)  
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Check Rust formatting
        run: cd rust && cargo fmt -- --check

      - name: Check Go formatting
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Go code is not formatted. Run 'go fmt ./...' to fix."
            gofmt -l .
            exit 1
          fi

  # üèóÔ∏è Phase 2: Build artifacts once (includes linting)
  build-artifacts:
    name: Build Artifacts
    needs: quick-checks
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            rust-target: x86_64-unknown-linux-gnu
            artifact-name: linux-x64
          # - os: macos-latest
          #   rust-target: aarch64-apple-darwin
          #   artifact-name: macos-arm64
          # - os: macos-13
          #   rust-target: x86_64-apple-darwin
          #   artifact-name: macos-x64
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
          targets: ${{ matrix.rust-target }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      # Install system dependencies
      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install system dependencies (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install protobuf

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rust/target/
          key: ${{ matrix.os }}-cargo-${{ matrix.rust-target }}-${{ hashFiles('rust/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-cargo-${{ matrix.rust-target }}-
            ${{ matrix.os }}-cargo-

      - name: Install cbindgen (cached)
        run: |
          if ! command -v cbindgen &> /dev/null; then
            cargo install cbindgen --version ^0.26
          fi

      # Rust linting (moved here from quick-checks)
      - name: Lint Rust code
        run: |
          cd rust
          cargo clippy --target ${{ matrix.rust-target }} -- -D warnings

      - name: Build using new binary distribution system
        run: |
          # Make build scripts executable
          chmod +x scripts/build-native.sh
          
          # Map CI matrix to our platform parameters
          case "${{ matrix.rust-target }}" in
            "x86_64-unknown-linux-gnu")
              ./scripts/build-native.sh linux amd64
              ;;
            "aarch64-apple-darwin")  
              ./scripts/build-native.sh darwin arm64
              ;;
            "x86_64-apple-darwin")
              ./scripts/build-native.sh darwin amd64
              ;;
            *)
              echo "‚ùå Unknown target: ${{ matrix.rust-target }}"
              exit 1
              ;;
          esac

      - name: Verify build artifacts
        run: |
          echo "üìù Checking binary distribution structure..."
          ls -la include/ || echo "‚ùå Missing include/ directory"
          ls -la lib/ || echo "‚ùå Missing lib/ directory"
          
          # Show what was built
          echo "üìö Built libraries:"
          find lib/ -name "*.a" -o -name "*.so" -o -name "*.dylib" -o -name "*.lib" -o -name "*.dll" | sort
          
          echo "üìã Header files:"
          find include/ -name "*.h" | sort

      - name: Build Go module
        run: go build ./...

      # üì¶ Upload reusable artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.artifact-name }}
          path: |
            lib/
            include/
          retention-days: 1
          compression-level: 6

  # üß™ Phase 3: Testing (reuses artifacts)
  test:
    name: Test Suite
    needs: build-artifacts
    strategy:
      matrix:
        os: [ubuntu-latest]
        go-version: ['1.21']
#        exclude:
#          # Optimize: only test latest Go on macOS
#          - os: macos-latest
#            go-version: '1.22'
#          - os: macos-latest
#            go-version: '1.21'
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      # üì• Download pre-built artifacts (no rebuild!)
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.os == 'ubuntu-latest' && 'linux-x64' || 'macos-arm64' }}
          path: .

      # Fix artifact directory structure (same as build-examples)
      - name: Verify build artifacts for testing
        run: |
          echo "üîç Verifying binary distribution structure for tests..."
          
          # Check header files
          if [ -f "include/lancedb.h" ]; then
            echo "‚úÖ Found header file: include/lancedb.h"
          else
            echo "‚ùå Missing header file: include/lancedb.h"
            find . -name "lancedb.h" 2>/dev/null || echo "No lancedb.h found anywhere"
            exit 1
          fi
          
          # Check library files
          if ls lib/*/liblancedb_go.* >/dev/null 2>&1; then
            echo "‚úÖ Found library files:"
            ls lib/*/liblancedb_go.* | head -5
          else
            echo "‚ùå Missing library files in lib/ directories"
            find . -name "liblancedb_go.*" 2>/dev/null || echo "No library files found anywhere"
            exit 1
          fi
          
          echo "‚úÖ Binary distribution verified for testing"

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.55.2
          skip-cache: false

      - name: Run Go linting
        run: golangci-lint run --config .golangci.yml

      # Debug: Check library files before running tests
      - name: Debug - Verify library files for tests
        run: |
          echo "Checking library files for runtime..."
          ls -la lib/
          find lib/ -name "liblancedb_go.*" -exec file {} \;
          echo "PWD: $(pwd)"
          
          # Check if we have libraries for current platform
          CURRENT_PLATFORM=$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m | sed 's/x86_64/amd64/; s/aarch64/arm64/')
          echo "Current platform: $CURRENT_PLATFORM"
          if [ -d "lib/$CURRENT_PLATFORM" ]; then
            echo "‚úÖ Found platform-specific libraries at: lib/$CURRENT_PLATFORM"
            ls -la "lib/$CURRENT_PLATFORM"
          else
            echo "‚ö†Ô∏è  Platform-specific libraries not found, checking available platforms:"
            ls lib/ 2>/dev/null || echo "No lib/ directory"
          fi

      - name: Run tests with race detection
        run: |
          # Platform detection (similar to Makefile)
          UNAME_S=$(uname -s)
          UNAME_M=$(uname -m)
          
          # Normalize architecture names
          case "$UNAME_M" in
            x86_64|amd64) ARCH=amd64 ;;
            arm64|aarch64) ARCH=arm64 ;;
            *) echo "‚ùå Unsupported architecture: $UNAME_M"; exit 1 ;;
          esac
          
          # Normalize platform names and set CGO flags
          case "$UNAME_S" in
            Darwin)
              PLATFORM=darwin
              FRAMEWORK_FLAGS="-framework Security -framework CoreFoundation"
              CGO_LDFLAGS="$(pwd)/lib/darwin_${ARCH}/liblancedb_go.a $FRAMEWORK_FLAGS"
              ;;
            Linux)
              PLATFORM=linux
              SYSTEM_LIBS="-lm -ldl -lpthread"
              CGO_LDFLAGS="$(pwd)/lib/linux_${ARCH}/liblancedb_go.a $SYSTEM_LIBS"
              ;;
            MINGW*|MSYS*|CYGWIN*)
              PLATFORM=windows
              ARCH=amd64
              CGO_LDFLAGS="$(pwd)/lib/windows_amd64/liblancedb_go.a"
              ;;
            *)
              echo "‚ùå Unsupported platform: $UNAME_S"
              exit 1
              ;;
          esac
          
          # Set CGO flags
          CGO_CFLAGS="-I$(pwd)/include"
          PLATFORM_ARCH="${PLATFORM}_${ARCH}"
          
          # Display platform information (like Makefile)
          echo "Running Go tests for $PLATFORM_ARCH..."
          echo "CGO_CFLAGS: $CGO_CFLAGS"
          echo "CGO_LDFLAGS: $CGO_LDFLAGS"
          
          # Run tests with proper CGO environment (like Makefile)
          CGO_CFLAGS="$CGO_CFLAGS" CGO_LDFLAGS="$CGO_LDFLAGS" go test -v -race ./...

      - name: Run benchmarks
        run: |
          # Platform detection (similar to Makefile)
          UNAME_S=$(uname -s)
          UNAME_M=$(uname -m)
          
          # Normalize architecture names
          case "$UNAME_M" in
            x86_64|amd64) ARCH=amd64 ;;
            arm64|aarch64) ARCH=arm64 ;;
            *) echo "‚ùå Unsupported architecture: $UNAME_M"; exit 1 ;;
          esac
          
          # Normalize platform names and set CGO flags
          case "$UNAME_S" in
            Darwin)
              PLATFORM=darwin
              FRAMEWORK_FLAGS="-framework Security -framework CoreFoundation"
              CGO_LDFLAGS="$(pwd)/lib/darwin_${ARCH}/liblancedb_go.a $FRAMEWORK_FLAGS"
              ;;
            Linux)
              PLATFORM=linux
              SYSTEM_LIBS="-lm -ldl -lpthread"
              CGO_LDFLAGS="$(pwd)/lib/linux_${ARCH}/liblancedb_go.a $SYSTEM_LIBS"
              ;;
            MINGW*|MSYS*|CYGWIN*)
              PLATFORM=windows
              ARCH=amd64
              CGO_LDFLAGS="$(pwd)/lib/windows_amd64/liblancedb_go.a"
              ;;
            *)
              echo "‚ùå Unsupported platform: $UNAME_S"
              exit 1
              ;;
          esac
          
          # Set CGO flags
          CGO_CFLAGS="-I$(pwd)/include"
          PLATFORM_ARCH="${PLATFORM}_${ARCH}"
          
          # Display platform information (like Makefile)
          echo "Running benchmarks for $PLATFORM_ARCH..."
          echo "CGO_CFLAGS: $CGO_CFLAGS"
          echo "CGO_LDFLAGS: $CGO_LDFLAGS"
          
          # Run benchmarks with proper CGO environment (like Makefile)
          CGO_CFLAGS="$CGO_CFLAGS" CGO_LDFLAGS="$CGO_LDFLAGS" go test -bench=. -benchmem ./...

  # üéØ Final status aggregation
  ci-success:
    name: CI Success
    if: always()
    needs: [quick-checks, build-artifacts, test]
    runs-on: ubuntu-latest
    
    steps:
      - name: Check all jobs status
        run: |
          jobs_status='${{ toJson(needs) }}'
          echo "Jobs status: $jobs_status"
          
          if echo "$jobs_status" | jq -r '.[] | select(.result != "success" and .result != "skipped") | .result' | grep -q .; then
            echo "‚ùå Some jobs failed"
            exit 1
          fi
          
          echo "‚úÖ All jobs completed successfully!"

  # üßπ Cleanup (optional)
  cleanup:
    name: Cleanup Artifacts
    if: always()
    needs: ci-success
    runs-on: ubuntu-latest
    steps:
      - name: Delete temporary artifacts
        uses: geekyeggo/delete-artifact@v4
        with:
          name: |
            build-*
            examples
        continue-on-error: true
