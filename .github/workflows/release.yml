name: Build and Release Native Binaries

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual triggering
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v0.1.0'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Build matrix for different platforms
  build-native:
    name: Build ${{ matrix.platform }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS builds
          - platform: darwin
            arch: amd64
            runner: macos-latest
            rust_target: x86_64-apple-darwin
            
          - platform: darwin
            arch: arm64
            runner: macos-latest
            rust_target: aarch64-apple-darwin
          
          # Linux builds
          - platform: linux
            arch: amd64
            runner: ubuntu-latest
            rust_target: x86_64-unknown-linux-gnu

          - platform: linux
            arch: arm64
            runner: ubuntu-latest
            rust_target: aarch64-unknown-linux-gnu

          # Windows builds
          - platform: windows
            arch: amd64
            runner: windows-latest
            rust_target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target }}
          components: rustfmt, clippy

      - name: Install cbindgen
        run: cargo install cbindgen --force

      # Install system dependencies
      - name: Install system dependencies (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install system dependencies (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install protobuf

      - name: Install system dependencies (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          # Try multiple methods to install protoc on Windows
          Write-Host "Installing protobuf compiler for Windows..."
          
          # Method 1: Try winget
          try {
            winget install --id Google.ProtocolBuffers --silent --accept-package-agreements --accept-source-agreements
            Write-Host "✅ Protobuf installed via winget"
          }
          catch {
            Write-Host "⚠️ Winget failed, trying chocolatey..."
            
            # Method 2: Try chocolatey 
            try {
              choco install protoc --yes
              Write-Host "✅ Protobuf installed via chocolatey"
            }
            catch {
              Write-Host "⚠️ Chocolatey failed, downloading manually..."
              
              # Method 3: Manual download
              $protoc_url = "https://github.com/protocolbuffers/protobuf/releases/download/v25.1/protoc-25.1-win64.zip"
              $protoc_zip = "$env:TEMP\protoc.zip"
              $protoc_dir = "$env:TEMP\protoc"
              
              Invoke-WebRequest -Uri $protoc_url -OutFile $protoc_zip
              Expand-Archive -Path $protoc_zip -DestinationPath $protoc_dir -Force
              
              # Add to PATH
              $env:PATH = "$protoc_dir\bin;$env:PATH"
              echo "PATH=$protoc_dir\bin;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Append
              
              Write-Host "✅ Protobuf installed manually"
            }
          }

      # Linux cross-compilation setup
      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.platform == 'linux' && matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      # Cache Rust dependencies
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "rust -> target"
          key: ${{ matrix.platform }}-${{ matrix.arch }}

      # Create directories (Unix)
      - name: Create directories (Unix)
        if: matrix.platform != 'windows'
        run: |
          mkdir -p lib/${{ matrix.platform }}_${{ matrix.arch }}
          mkdir -p include

      # Create directories (Windows)
      - name: Create directories (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "lib/${{ matrix.platform }}_${{ matrix.arch }}" -Force
          New-Item -ItemType Directory -Path "include" -Force

      - name: Build native library
        run: |
          cd rust
          cargo build --release --target ${{ matrix.rust_target }}
        env:
          RUST_TARGET: ${{ matrix.rust_target }}

      - name: Generate C header
        if: matrix.platform == 'darwin' && matrix.arch == 'amd64'  # Generate header only once
        run: |
          cd rust
          cbindgen --config cbindgen.toml --crate lancedb-go --output ../include/lancedb.h

      # Copy libraries - macOS/Linux
      - name: Copy libraries (Unix)
        if: matrix.platform != 'windows'
        run: |
          cd rust/target/${{ matrix.rust_target }}/release
          cp liblancedb_go.a ../../../../../lib/${{ matrix.platform }}_${{ matrix.arch }}/
          # Copy dynamic library if it exists
          if [ -f liblancedb_go.dylib ]; then
            cp liblancedb_go.dylib ../../../../../lib/${{ matrix.platform }}_${{ matrix.arch }}/
          fi
          if [ -f liblancedb_go.so ]; then
            cp liblancedb_go.so ../../../../../lib/${{ matrix.platform }}_${{ matrix.arch }}/
          fi

      # Copy libraries - Windows
      - name: Copy libraries (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          Set-Location rust/target/${{ matrix.rust_target }}/release
          Write-Host "📂 Contents of release directory:"
          Get-ChildItem -Name | Write-Host
          
          # Copy static library (.a is preferred for CGO compatibility)
          if (Test-Path "liblancedb_go.a") {
            Copy-Item liblancedb_go.a ../../../../../lib/${{ matrix.platform }}_${{ matrix.arch }}/
            Write-Host "✅ Copied liblancedb_go.a (static library for CGO)"
          } elseif (Test-Path "lancedb_go.lib") {
            Copy-Item lancedb_go.lib ../../../../../lib/${{ matrix.platform }}_${{ matrix.arch }}/
            Write-Host "✅ Copied lancedb_go.lib"
          } elseif (Test-Path "liblancedb_go.lib") {
            Copy-Item liblancedb_go.lib ../../../../../lib/${{ matrix.platform }}_${{ matrix.arch }}/
            Write-Host "✅ Copied liblancedb_go.lib"
          } else {
            Write-Host "❌ No static library found (.a, .lib)"
            Write-Host "Available files:"
            Get-ChildItem -Filter "*lancedb*" | Format-Table Name, Length
            exit 1
          }
          
          # Copy dynamic library (.dll)
          if (Test-Path "lancedb_go.dll") {
            Copy-Item lancedb_go.dll ../../../../../lib/${{ matrix.platform }}_${{ matrix.arch }}/
            Write-Host "✅ Copied lancedb_go.dll"
          } elseif (Test-Path "liblancedb_go.dll") {
            Copy-Item liblancedb_go.dll ../../../../../lib/${{ matrix.platform }}_${{ matrix.arch }}/
            Write-Host "✅ Copied liblancedb_go.dll"
          } else {
            Write-Host "⚠️  No dynamic library found (.dll)"
            Write-Host "This is expected for static builds"
          }

      # Upload artifacts for each platform
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lancedb-go-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            lib/${{ matrix.platform }}_${{ matrix.arch }}/
            include/
          retention-days: 7

  # Create release with all binaries
  create-release:
    name: Create Release
    needs: build-native
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Download all build artifacts
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      # Verify all expected files exist
      - name: Verify binaries
        run: |
          echo "🔍 Verifying binary files..."
          find lib/ -name "*.a" -o -name "*.so" -o -name "*.dylib" -o -name "*.lib" -o -name "*.dll" | sort
          
          echo "📝 Verifying header files..."
          ls -la include/
          
          # Check that we have binaries for all expected platforms
          expected_platforms="darwin_amd64 darwin_arm64 linux_amd64 linux_arm64 windows_amd64"
          for platform in $expected_platforms; do
            if [ ! -d "lib/$platform" ]; then
              echo "❌ Missing binaries for platform: $platform"
              exit 1
            fi
            echo "✅ Found binaries for platform: $platform"
          done

      # Create archive with all binaries
      - name: Create release archive
        run: |
          echo "📦 Creating release archive..."
          
          # Create a comprehensive README for the release
          cat > RELEASE_NOTES.md << 'EOF'
          # LanceDB Go SDK - Native Binaries Release
          
          This release contains pre-built native libraries for the LanceDB Go SDK.
          
          ## Installation
          
          ```bash
          go get github.com/lancedb/lancedb-go
          ```
          
          No additional build steps required! The native libraries are included.
          
          ## Supported Platforms
          
          - **macOS**: Intel (amd64) and Apple Silicon (arm64)
          - **Linux**: Intel/AMD (amd64) and ARM (arm64)  
          - **Windows**: Intel/AMD (amd64)
          
          ## Files Included
          
          - `include/lancedb.h` - C header file
          - `lib/darwin_amd64/` - macOS Intel binaries
          - `lib/darwin_arm64/` - macOS Apple Silicon binaries  
          - `lib/linux_amd64/` - Linux AMD64 binaries
          - `lib/linux_arm64/` - Linux ARM64 binaries
          - `lib/windows_amd64/` - Windows AMD64 binaries
          
          ## Usage
          
          See the examples in the `examples/` directory for usage patterns.
          EOF
          
          # Create archive
          tar -czf lancedb-go-native-binaries.tar.gz lib/ include/ RELEASE_NOTES.md
          
          echo "✅ Release archive created: lancedb-go-native-binaries.tar.gz"
          tar -tzf lancedb-go-native-binaries.tar.gz | head -20

      # Get version from tag or input
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📋 Release version: $VERSION"

      # Commit and push the binary files to the repository
      - name: Commit binary files
        run: |
          echo "📝 Configuring git..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          echo "➕ Adding binary files to repository..."
          git add lib/ include/
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "ℹ️ No changes to commit"
          else
            echo "💾 Committing binary files..."
            git commit -m "Add pre-built native binaries for ${{ steps.get_version.outputs.version }}"
            
            echo "🚀 Pushing to repository..."
            git push origin HEAD:main
          fi

      # Create GitHub release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: LanceDB Go SDK ${{ steps.get_version.outputs.version }}
          body_path: RELEASE_NOTES.md
          files: |
            lancedb-go-native-binaries.tar.gz
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, 'alpha') || contains(steps.get_version.outputs.version, 'beta') || contains(steps.get_version.outputs.version, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Test the release by trying to use it
      - name: Test release installation
        run: |
          echo "🧪 Testing release installation..."
          
          # Create a temporary Go module to test installation
          cd /tmp
          mkdir lancedb-test
          cd lancedb-test
          
          go mod init lancedb-test
          go get github.com/lancedb/lancedb-go@${{ steps.get_version.outputs.version }}
          
          echo "✅ Release installation test passed!"